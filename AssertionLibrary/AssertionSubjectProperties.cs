using System.Collections.Generic;
using System.Dynamic;
using System.Linq;

namespace AssertionLibrary
{
    public class AssertionSubjectProperties
    {
        private readonly IDictionary<string, object> _subjectProperties = new ExpandoObject();

        public AssertionSubjectProperties(object subject)
        {
            foreach (var property in subject.GetType().GetProperties())
            {
                _subjectProperties.Add(property.Name, property.GetValue(subject));
            }
        }

        public AssertionSubjectProperties(object subject, string excludedPropertyName)
        {
            foreach (var property in subject.GetType().GetProperties()
                .Where(p => p.Name != excludedPropertyName))
            {
                _subjectProperties.Add(property.Name, property.GetValue(subject));
            }
        }

        public override bool Equals(object other)
        {
            var otherProperties = other.GetType().GetProperties();
            foreach (var subjectProperty in _subjectProperties)
            {
                var otherProperty = otherProperties.SingleOrDefault(p => p.Name == subjectProperty.Key);
                if (otherProperty == null || !subjectProperty.Value.Equals(otherProperty.GetValue(other)))
                {
                    return false;
                }
            }
            return true;
        }

        //autogenerated
        public override int GetHashCode()
        {
            return 80682163 + EqualityComparer<IDictionary<string, object>>.Default.GetHashCode(_subjectProperties);
        }
    }
}
